name: 'publish'

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf \
            libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        run: npm run tauri build -- ${{ matrix.args }}

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: startsWith(matrix.platform, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./src-tauri/tauri.conf.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -laR artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ steps.get_version.outputs.VERSION }}
          release_name: Dave v${{ steps.get_version.outputs.VERSION }}
          body: |
            Download Dave for your platform:
            
            ## macOS
            - Intel: `project-dave_${{ steps.get_version.outputs.VERSION }}_macos-x86_64-apple-darwin.dmg`
            
            ## Linux
            - x64: `project-dave_${{ steps.get_version.outputs.VERSION }}_linux-x86_64-unknown-linux-gnu.AppImage`
            - x64 (Debian): `project-dave_${{ steps.get_version.outputs.VERSION }}_linux-x86_64-unknown-linux-gnu.deb`
            
            ## Windows
            - x64 Installer: `project-dave_${{ steps.get_version.outputs.VERSION }}_windows-x86_64-pc-windows-msvc-setup.exe`
            - x64 MSI: `project-dave_${{ steps.get_version.outputs.VERSION }}_windows-x86_64-pc-windows-msvc.msi`
          draft: false
          prerelease: false

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-x86_64-apple-darwin/project-dave_${{ steps.get_version.outputs.VERSION }}_x64.dmg
          asset_name: project-dave_${{ steps.get_version.outputs.VERSION }}_macos-x86_64-apple-darwin.dmg
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-x86_64-unknown-linux-gnu/project-dave_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage
          asset_name: project-dave_${{ steps.get_version.outputs.VERSION }}_linux-x86_64-unknown-linux-gnu.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux Deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-x86_64-unknown-linux-gnu/project-dave_${{ steps.get_version.outputs.VERSION }}_amd64.deb
          asset_name: project-dave_${{ steps.get_version.outputs.VERSION }}_linux-x86_64-unknown-linux-gnu.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Windows Setup EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-x86_64-pc-windows-msvc/project-dave_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe
          asset_name: project-dave_${{ steps.get_version.outputs.VERSION }}_windows-x86_64-pc-windows-msvc-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-x86_64-pc-windows-msvc/project-dave_${{ steps.get_version.outputs.VERSION }}_x64_en-US.msi
          asset_name: project-dave_${{ steps.get_version.outputs.VERSION }}_windows-x86_64-pc-windows-msvc.msi
          asset_content_type: application/octet-stream